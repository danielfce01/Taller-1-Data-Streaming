#
# Autogenerated by Thrift Compiler (0.22.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec
from uuid import UUID

import sys

from thrift.transport import TTransport
all_structs = []


class Venta(object):
    """
    Attributes:
     - id
     - comprador
     - cedula
     - categoria
     - producto
     - precio
     - metodo_pago
     - fecha_venta
     - fecha_garantia
     - solucion
     - queja

    """
    thrift_spec = None


    def __init__(self, id = None, comprador = None, cedula = None, categoria = None, producto = None, precio = None, metodo_pago = None, fecha_venta = None, fecha_garantia = None, solucion = None, queja = None,):
        self.id = id
        self.comprador = comprador
        self.cedula = cedula
        self.categoria = categoria
        self.producto = producto
        self.precio = precio
        self.metodo_pago = metodo_pago
        self.fecha_venta = fecha_venta
        self.fecha_garantia = fecha_garantia
        self.solucion = solucion
        self.queja = queja

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.comprador = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.cedula = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.categoria = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.producto = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.precio = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.metodo_pago = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.fecha_venta = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.fecha_garantia = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.solucion = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.queja = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Venta')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.comprador is not None:
            oprot.writeFieldBegin('comprador', TType.STRING, 2)
            oprot.writeString(self.comprador.encode('utf-8') if sys.version_info[0] == 2 else self.comprador)
            oprot.writeFieldEnd()
        if self.cedula is not None:
            oprot.writeFieldBegin('cedula', TType.I64, 3)
            oprot.writeI64(self.cedula)
            oprot.writeFieldEnd()
        if self.categoria is not None:
            oprot.writeFieldBegin('categoria', TType.STRING, 4)
            oprot.writeString(self.categoria.encode('utf-8') if sys.version_info[0] == 2 else self.categoria)
            oprot.writeFieldEnd()
        if self.producto is not None:
            oprot.writeFieldBegin('producto', TType.STRING, 5)
            oprot.writeString(self.producto.encode('utf-8') if sys.version_info[0] == 2 else self.producto)
            oprot.writeFieldEnd()
        if self.precio is not None:
            oprot.writeFieldBegin('precio', TType.I64, 6)
            oprot.writeI64(self.precio)
            oprot.writeFieldEnd()
        if self.metodo_pago is not None:
            oprot.writeFieldBegin('metodo_pago', TType.STRING, 7)
            oprot.writeString(self.metodo_pago.encode('utf-8') if sys.version_info[0] == 2 else self.metodo_pago)
            oprot.writeFieldEnd()
        if self.fecha_venta is not None:
            oprot.writeFieldBegin('fecha_venta', TType.STRING, 8)
            oprot.writeString(self.fecha_venta.encode('utf-8') if sys.version_info[0] == 2 else self.fecha_venta)
            oprot.writeFieldEnd()
        if self.fecha_garantia is not None:
            oprot.writeFieldBegin('fecha_garantia', TType.STRING, 9)
            oprot.writeString(self.fecha_garantia.encode('utf-8') if sys.version_info[0] == 2 else self.fecha_garantia)
            oprot.writeFieldEnd()
        if self.solucion is not None:
            oprot.writeFieldBegin('solucion', TType.STRING, 10)
            oprot.writeString(self.solucion.encode('utf-8') if sys.version_info[0] == 2 else self.solucion)
            oprot.writeFieldEnd()
        if self.queja is not None:
            oprot.writeFieldBegin('queja', TType.STRING, 11)
            oprot.writeString(self.queja.encode('utf-8') if sys.version_info[0] == 2 else self.queja)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Venta)
Venta.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'id', None, None, ),  # 1
    (2, TType.STRING, 'comprador', 'UTF8', None, ),  # 2
    (3, TType.I64, 'cedula', None, None, ),  # 3
    (4, TType.STRING, 'categoria', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'producto', 'UTF8', None, ),  # 5
    (6, TType.I64, 'precio', None, None, ),  # 6
    (7, TType.STRING, 'metodo_pago', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'fecha_venta', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'fecha_garantia', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'solucion', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'queja', 'UTF8', None, ),  # 11
)
fix_spec(all_structs)
del all_structs
